{"version":3,"sources":["components/Home-page/PP.jpeg","components/Home-page/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","fixedHeader","id","title","style","color","href","width","margin","col","src","pp","alt","className","rel","target","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,4NC0D5BC,EApDF,WACT,OACI,6BACA,kBAAC,SAAD,CAAQC,aAAW,GACf,kBAAC,SAAD,CAAQC,GAAK,gBAAgBC,MAAO,8BAAM,0BAAMC,MAAO,CAAEC,MAAO,SAAtB,eAAkD,6DACxF,kBAAC,aAAD,KACI,uBAAGC,KAAK,KAAR,qBACA,uBAAGA,KAAK,KAAR,yBACA,uBAAGA,KAAK,KAAR,eAGR,kBAAC,SAAD,CAAQH,MAAM,QACV,kBAAC,aAAD,KACI,uBAAGG,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,UAGR,kBAAC,UAAD,CAASJ,GAAK,gBACV,yBAAKE,MAAO,CAACG,MAAM,OAAQC,OAAO,SAC9B,kBAAC,OAAD,CAAMN,GAAG,iBACL,kBAAC,OAAD,CAAMO,IAAK,IACP,yBAAKC,IAAOC,IAAIC,IAAM,KAAKC,UAAY,aAAaX,GAAK,OACzD,yBAAKA,GAAK,oBACN,yDACA,6BACA,qEACA,yBAAKA,GAAK,iBAEN,uBAAGI,KAAK,iEAAiEQ,IAAI,sBAAsBC,OAAO,UACtG,uBAAGF,UAAU,wBAAwBG,cAAa,UAGtD,uBAAGV,KAAK,4BAA4BQ,IAAI,sBAAsBC,OAAO,UACjE,uBAAGF,UAAU,sBAAsBG,cAAa,UAGpD,uBAAGV,KAAK,kCAAkCQ,IAAI,sBAAsBC,OAAO,UACvE,uBAAGF,UAAU,uBAAuBG,cAAa,mBC7B1EC,EARH,WACR,OACI,6BACI,kBAAC,EAAD,QCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81d78e9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PP.94d07585.jpeg\";","import React from 'react'\nimport { Layout, Header, Navigation, Drawer, Cell, Grid, Content} from 'react-mdl';\nimport './Home.css'\nimport pp from './PP.jpeg';\n\n\nconst Home = () =>{\n    return(\n        <div>\n        <Layout fixedHeader>\n            <Header id = 'headerId-home' title={<span><span style={{ color: '#ddd' }}>My profile </span><strong>Juan Pablo Ramos Robles</strong></span>}>\n                <Navigation>\n                    <a href=\"/\">Personal projects</a>\n                    <a href=\"/\">Skills & Endorsements</a>\n                    <a href=\"/\">Education</a>\n                </Navigation>\n            </Header>\n            <Drawer title=\"JPRR\">\n                <Navigation>\n                    <a href=\"/\">Link</a>\n                    <a href=\"/\">Link</a>\n                    <a href=\"/\">Link</a>\n                    <a href=\"/\">Link</a>\n                </Navigation>\n            </Drawer>\n            <Content id = 'content-home'>\n                <div style={{width:'100%', margin:'auto'}}>\n                    <Grid id='grid-homePage'>\n                        <Cell col={12}>\n                            <img src = {pp} alt = \"pp\" className = \"avatar-img\" id = 'pp'/>\n                            <div id = 'description-home'>\n                                <h1>Computer systems engineer</h1>\n                                <hr/>\n                                <p>Java | React | JavaScript | HTML | CSS</p>\n                                <div id = 'socialId-home'>\n                                    {/* Linkedin */}\n                                    <a href=\"https://www.linkedin.com/in/juan-pablo-ramos-robles-b9330b184/\" rel='noopener noreferrer' target='_blank'>\n                                        <i className=\"fa fa-linkedin-square\" aria-hidden= 'true'/>\n                                    </a>\n                                    {/* Github */}\n                                    <a href=\"https://github.com/JPRR44\" rel='noopener noreferrer' target='_blank'>\n                                        <i className=\"fa fa-github-square\" aria-hidden= 'true'/>\n                                    </a>\n                                    {/* Twitter */}\n                                    <a href=\"https://twitter.com/JuanpRobles\" rel='noopener noreferrer' target='_blank'>\n                                        <i className=\"fa fa-twitter-square\" aria-hidden= 'true'/>\n                                    </a>\n                                </div>\n                            </div>\n                        </Cell>\n                    </Grid>\n                </div>\n            </Content>\n        </Layout>\n    </div>  \n    )\n}\n\nexport default Home;","import React from 'react'\nimport './App.css'\nimport Home from './components/Home-page/Home';\n// import Education from './components/Education-page/Education';\n// import Projects from './components/Projects-page/Projects';\n// import Skills from './components/Skills-page/Skills';\n\n\nconst App = () =>{\n    return(\n        <div>\n            <Home/>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';  \nimport 'tachyons';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n "],"sourceRoot":""}